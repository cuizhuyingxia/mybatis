<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 配置接口IUserDao的映射文件-->
<!-- namespace：接口IUserDao的全限定类名-->
<mapper namespace="com.itheima.dao.IUserDao">

    <!-- sql标签，用于抽取重复的sql语句 -->
    <sql id="defaultUser">
        select * from user
    </sql>

    <!-- 配置实体类中的属性名和表中的字段名的对应关系 -->
    <resultMap id="userMap" type="com.itheima.domain.User">
        <!-- 主键字段的对应关系 -->
        <id property="userId" column="id"></id> <!-- 实体类的属性userId和表中的字段名id对应-->
        <!-- 非主键字段的对应关系 -->
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
    </resultMap>

    <!-- 通过写别名的方式，解决实体类中的属性名和表中的字段名不一致的问题 -->
    <!-- id：需要执行接口IUserDao中的方法名称 -->   <!-- resultType：用于封装查询结果的实体类的全限定类名 -->
    <!--<select id="findAll" resultType="com.itheima.domain.User">
        select id as userId, username as userName, address as userAddress, sex as userSex, birthday as userBirthday from user;
    </select>-->

    <!-- 使用resultMap映射，解决实体类中的属性名和表中的字段名不一致的问题 -->
    <select id="findAll" resultMap="userMap">
        <!-- 使用sql标签中的sql语句片段 -->
        <include refid="defaultUser"/>
    </select>

    <select id="findById" parameterType="java.lang.Integer" resultMap="userMap">
        select * from user where id = #{id}
    </select>

    <select id="findByUsername" parameterType="string" resultMap="userMap">
        <!-- select * from user where username like '%${value}%'; -->
        select * from user where username like #{username}
    </select>

    <!-- 根据QueryVo（就是一个类，不过类里面有其它类的对象）中的查询条件，查询用户信息 -->
    <select id="findUserByVo" parameterType="com.itheima.domain.QueryVo" resultMap="userMap">
                                              <!-- 获取QueryVo中的属性user对象，再获取user对象的属性username作为参数 -->
        select * from user where username like #{user.userName}
    </select>

    <!-- 根据条件查询 if标签
    <select id="findUserByCondition" parameterType="user" resultMap="userMap">
        select * from user where 1=1
        <if test="userName != null">  &lt;!&ndash; 如果参数user对象中的属性userName不为空， &ndash;&gt;
          and username = #{userName}  &lt;!&ndash; 则取出userName的值作为查询条件&ndash;&gt;
        </if>
        <if test="userSex != null">  &lt;!&ndash; 如果参数user对象中的属性userSex不为空， &ndash;&gt;
            and sex = #{userSex}      &lt;!&ndash; 则取出userSex的值作为查询条件&ndash;&gt;
        </if>
    </select>-->

    <!-- 根据条件查询 where标签 -->
    <select id="findUserByCondition" parameterType="user" resultMap="userMap">
        select * from user
        <where>
            <if test="userName != null">
                and username = #{userName}
            </if>
            <if test="userSex != null">
                and sex = #{userSex}
            </if>
        </where>
    </select>

    <!-- 根据Query中的id集合查询用户列表 foreach标签 -->
    <select id="findUserInIds" parameterType="QueryVo" resultMap="userMap">
        <!-- 使用sql标签中的sql语句片段 -->
        <include refid="defaultUser"/>
        <where>
            <if test="ids != null and ids.size() > 0">  <!-- 如果ids不为null -->
                <!-- 遍历ids集合，取出每一个uid，依次放到sql语句中：and id in (uid, uid, uid) -->
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>
</mapper>