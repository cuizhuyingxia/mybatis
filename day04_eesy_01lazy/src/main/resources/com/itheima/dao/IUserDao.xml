<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 配置接口IUserDao的映射文件-->
<!-- namespace：接口IUserDao的全限定类名-->
<mapper namespace="com.itheima.dao.IUserDao">

    <resultMap id="userMap" type="user">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="address" column="address"></result>
        <result property="sex" column="sex"></result>
        <result property="birthday" column="birthday"></result>
        <!-- 建立一对多的关系映射，以实现封装account表的数据，使用延迟加载
            property属性用于指定user实体类中引用的Account对象的集合
            ofType属性用于指定要将account表中的数据封装到哪里，这里我们可以写全类名com.itheima.domain.Account 也可以写别名account
            select属性用于指定延迟加载时，使用哪个方法去查询account表的数据
            column属性用于告诉select属性根据哪个id去查询account表的数据，这里我们可以指定为user表中的id，这样就可以查到user表的用户对应的account表的账户信息
                不过这里可以不用设置ofType属性，因为我们是使用com.itheima.dao.IUserDao.findAccountByUid方法去查询account表的数据，com.itheima.dao.IUserDao.findAccountByUid方法中已经指定了返回结果的封装类型为account
        -->
        <collection property="accounts" ofType="com.itheima.domain.Account" select="com.itheima.dao.IAccountDao.findAccountByUid" column="id"></collection>
</resultMap>

    <!-- 查询所有用户，以及用户的账户信息 -->
    <select id="findAll" resultMap="userMap">
        select * from user;
    </select>

    <!-- 根据id查询用户 -->
    <select id="findUserById" parameterType="int" resultType="user">
        select * from user where id = #{uid};
    </select>
</mapper>